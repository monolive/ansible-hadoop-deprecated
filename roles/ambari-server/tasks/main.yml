--- 
 - name : install ambari-server
   yum : name=ambari-server state=present

 - name : Create Folder
   file : dest=/root/ambari-install state=directory mode=0755

 - name : Copy configs.sh
   copy : src=configs.sh dest=/root/ambari-install/configs.sh mode=0755

 - name : Copy cluster-install.sh
   copy : src=cluster-install.sh dest=/root/ambari-install/cluster-install.sh mode=0755

 - name : configure ambari-server
   shell : creates=/root/ambari-install/ansible.done ambari-server setup -j /usr/java/default -s > /tmp/output

 - name : check if ambari-server is installed
   wait_for : path=/tmp/output search_regex="completed successfully"

 - name : configure local repo
   template : src=repoinfo.xml.j2 dest=/var/lib/ambari-server/resources/stacks/HDP/{{ hdp['HDP_VERSION'] }}/repos/repoinfo.xml 
   when : repository.local_repo

 - name : start ambari server
   service : name=ambari-server state=restarted
   # command : /usr/sbin/ambari-server start creates=/root/ambari-install/ambari-server.run chdir=/usr/sbin 
#   shell : /usr/sbin/ambari-server start creates=/root/ambari-install/ambari-server.run
#   register : result
#   until : result.stdout.find("completed successfully") == 1

 - name : check if ambari-server is up
   wait_for : host={{ hostvars[groups['ambari_server'][0]]['ansible_fqdn'] }} port=8080 delay=10

 - name : Copy jdk 6u31
   copy : src=jdk-6u31-linux-x64.bin dest=/var/lib/ambari-server/resources/jdk-6u31-linux-x64.bin

 - name : copy script
   template : src=create-cluster.sh.j2 dest=/root/ambari-install/create-cluster.sh mode=0755

 - name : create cluster
   command : /root/ambari-install/create-cluster.sh creates=/root/ambari-install/create-cluster.done shell=/bin/bash
